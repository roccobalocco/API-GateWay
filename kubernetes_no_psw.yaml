apiVersion: v1
kind: Namespace
metadata:
  name: cloudmare

---

apiVersion: v1
kind: Secret
metadata:
  name: db-connection
  namespace: cloudmare
type: Opaque
stringData:
  Local: "Server=mssql;Database=Gateway;User Id=sa;Password=<Password>;Encrypt=False;TrustServerCertificate=True"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mssql-pvc
  namespace: cloudmare
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mssql
  namespace: cloudmare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mssql
  template:
    metadata:
      labels:
        app: mssql
    spec:
      containers:
        - name: mssql
          image: mcr.microsoft.com/mssql/server:2019-latest
          ports:
            - containerPort: 1433
          env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: SA_PASSWORD
              value: "<Password>"
          livenessProbe:
            tcpSocket:
              port: 1433
            initialDelaySeconds: 10
            periodSeconds: 15
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 1433
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          volumeMounts:
            - name: mssql-storage
              mountPath: /var/opt/mssql
      volumes:
        - name: mssql-storage
          persistentVolumeClaim:
            claimName: mssql-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: mssql
  namespace: cloudmare
spec:
  ports:
    - port: 1433
      targetPort: 1433
  selector:
    app: mssql

---

# bookms Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bookms
  namespace: cloudmare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bookms
  template:
    metadata:
      labels:
        app: bookms
    spec:
      containers:
        - name: bookms
          image: roccobalocco/book:latest
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: 100m
            limits:
              cpu: 500m
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 15
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          env:
            - name: ConnectionStrings__Local
              valueFrom:
                secretKeyRef:
                  name: db-connection
                  key: Local

---

apiVersion: v1
kind: Service
metadata:
  name: bookms
  namespace: cloudmare
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: bookms

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: bookms-hpa
  namespace: cloudmare
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: bookms
  minReplicas: 1
  maxReplicas: 4
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 20

---

# userms Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: userms
  namespace: cloudmare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: userms
  template:
    metadata:
      labels:
        app: userms
    spec:
      containers:
        - name: userms
          image: roccobalocco/user:latest
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: 100m
            limits:
              cpu: 500m
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 15
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          env:
            - name: ConnectionStrings__Local
              valueFrom:
                secretKeyRef:
                  name: db-connection
                  key: Local

---

apiVersion: v1
kind: Service
metadata:
  name: userms
  namespace: cloudmare
spec:
  ports:
    - port: 81
      targetPort: 8080
  selector:
    app: userms

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: userms-hpa
  namespace: cloudmare
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: userms
  minReplicas: 1
  maxReplicas: 4
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 20

---

# loanms Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loanms
  namespace: cloudmare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loanms
  template:
    metadata:
      labels:
        app: loanms
    spec:
      containers:
        - name: loanms
          image: roccobalocco/loan:latest
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: 100m
            limits:
              cpu: 500m
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 15
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          env:
            - name: ConnectionStrings__Local
              valueFrom:
                secretKeyRef:
                  name: db-connection
                  key: Local

---

apiVersion: v1
kind: Service
metadata:
  name: loanms
  namespace: cloudmare
spec:
  ports:
    - port: 82
      targetPort: 8080
  selector:
    app: loanms

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: loanms-hpa
  namespace: cloudmare
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: loanms
  minReplicas: 1
  maxReplicas: 4
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 20

---

# roomms Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: roomms
  namespace: cloudmare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: roomms
  template:
    metadata:
      labels:
        app: roomms
    spec:
      containers:
        - name: roomms
          image: roccobalocco/room:latest
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: 100m
            limits:
              cpu: 500m
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 15
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          env:
            - name: ConnectionStrings__Local
              valueFrom:
                secretKeyRef:
                  name: db-connection
                  key: Local

---

apiVersion: v1
kind: Service
metadata:
  name: roomms
  namespace: cloudmare
spec:
  ports:
    - port: 83
      targetPort: 8080
  selector:
    app: roomms

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: roomms-hpa
  namespace: cloudmare
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: roomms
  minReplicas: 1
  maxReplicas: 4
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 20

---

# API Gateway Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apigateway
  namespace: cloudmare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apigateway
  template:
    metadata:
      labels:
        app: apigateway
    spec:
      containers:
        - name: apigateway
          image: roccobalocco/api-gateway:latest
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: 100m
            limits:
              cpu: 500m
          env:
            - name: ConnectionStrings__Local
              valueFrom:
                secretKeyRef:
                  name: db-connection
                  key: Local

---

apiVersion: v1
kind: Service
metadata:
  name: apigateway
  namespace: cloudmare
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: apigateway

---

# Prometheus Deployment & Service

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: cloudmare
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app]
            regex: room|book|loan|user|apigateway
            action: keep
          - source_labels: [__meta_kubernetes_service_label_app]
            target_label: app

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: cloudmare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config

---

apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: cloudmare
spec:
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    app: prometheus

---

# Grafana Deployment, Service, ConfigMap (Datasource provisioning)

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning
  namespace: cloudmare
data:
  datasources.yaml: |-
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: false

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: cloudmare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin"
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: "Viewer"
          volumeMounts:
            - name: grafana-provisioning
              mountPath: /etc/grafana/provisioning
      volumes:
        - name: grafana-provisioning
          configMap:
            name: grafana-provisioning

---

apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: cloudmare
spec:
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: grafana
